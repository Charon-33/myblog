(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{435:function(t,a,s){"use strict";s.r(a);var n=s(2),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"java基础常见面试题总结-上"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java基础常见面试题总结-上"}},[t._v("#")]),t._v(" Java基础常见面试题总结(上)")]),t._v(" "),a("h2",{attrs:{id:"基础概念与常识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础概念与常识"}},[t._v("#")]),t._v(" 基础概念与常识")]),t._v(" "),a("h3",{attrs:{id:"_1-java-语言有哪些特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-java-语言有哪些特点"}},[t._v("#")]),t._v(" 1. Java 语言有哪些特点?")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("简单易学；")]),t._v(" "),a("blockquote",[a("p",[t._v("Java语言类似C++，因此熟悉C++的程序员很容易掌握java,另外它摒弃了C++中易发生错误的地方，尤其是Java语言不使用指针，并提供了自动的废料收集，使得程序员不必为内存管理而担忧。")])])]),t._v(" "),a("li",[a("p",[t._v("面向对象（封装，继承，多态）；")]),t._v(" "),a("blockquote",[a("p",[t._v("简单地讲，面向对象设计是一种程序设计技术。它将重，点放在数据（即对象）和对象的接口上。用木匠打一个比方：一个“面向对象的”木匠始终首先关注的是所制作的椅子，其次才是所使用的工具；一个“非面向对象的”木匠主要考虑的是所用的工具。")]),t._v(" "),a("p",[t._v("在本质上，Java的面向对象能力与C++是一样的。开发Java时面向对象技术已经相当成熟。Java的面向对象特性与C++旗鼓相当。Java与C++的主要不同点在于多重继承，在Java中，取而代之的是更简单的接口概念。与C++相比，Java提供了更丰富的运行时自省功能。")])])]),t._v(" "),a("li",[a("p",[t._v("平台无关性（ Java 虚拟机实现平台无关性）；")]),t._v(" "),a("blockquote",[a("p",[t._v("所谓的跨平台性（平台无关性）就是指软件可以不受计算机硬件和操作系统的约束而在任意计算机环境下正常运行。而在Java中它自带的虚拟机可以很好的实现跨平台性，它提供了一个字节码到底层硬件平台及操作系统的屏障，使得Java语言具备跨平台性。")])])]),t._v(" "),a("li",[a("p",[t._v("支持多线程；")])]),t._v(" "),a("li",[a("p",[t._v("可靠性；")])]),t._v(" "),a("li",[a("p",[t._v("安全性；")]),t._v(" "),a("blockquote",[a("p",[t._v("Java要适用于网络/分布式环境。为了实现这个目标，安全性颇受重视。使用Java可以构建防病毒、防篡改的系统。")]),t._v(" "),a("p",[t._v("从一开始，Java就设计成能够防范各种攻击，其中包括：")]),t._v(" "),a("ol",[a("li",[t._v("运行时堆栈溢出，这是蠕虫和病毒常用的攻击手段。")]),t._v(" "),a("li",[t._v("破坏自己的进程空间之外的内存。")]),t._v(" "),a("li",[t._v("未经授权读写文件。")])]),t._v(" "),a("p",[t._v("原先，Java对下载代码的态度是“尽管来吧！”。不可信代码在一个沙箱环境中执行，在这里它不会影响主系统。用户可以确信不会发生不好的事情，因为Java代码不论来自哪里，都不能脱离沙箱。\n不过，Java的安全模型很复杂。Java开发包(Java Development Kit,JDK)的第一版发布之后不久，普林斯顿大学的一些安全专家就发现一些小bug会允许不可信的代码攻击主系统。\n最初，安全bug可以快速修复。遗憾的是，经过一段时间之后，黑客已经很擅长找出安全体系结构实现中的小漏洞。Sun以及之后的Oracle为不断修复bug经历了一段很是艰难的日子。\n遭遇多次高调攻击之后，浏览器开发商和Oracle开始越来越谨慎。Java浏览器插件不再信任远程代码，除非代码有数字签名而且用户同意执行这个代码。")]),t._v(" "),a("p",[t._v("注释：现在看来，尽管Java安全模型没有原先预想的那么成功，但Java在那个时代确实相当超前。微软提供了一种与之竞争的代码交付机制，其安全性完全依赖于数字签名。显然这是不够的，因为微软自身产品的任何用户都可以证实，一些知名开发商的程序确实会崩溃并对系统产生危害。")]),t._v(" "),a("p",[t._v("《Java核心技术》卷一 第11版")])])]),t._v(" "),a("li",[a("p",[t._v("支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；")])]),t._v(" "),a("li",[a("p",[t._v("编译与解释并存；")]),t._v(" "),a("blockquote",[a("p",[a("img",{attrs:{src:"1.assets/image-20230105135354963.png",alt:"image-20230105135354963"}}),a("img",{attrs:{src:"1.assets/image-20230105135420251.png",alt:"image-20230105135420251"}})])])])]),t._v(" "),a("p",[t._v("🌈 拓展一下：")]),t._v(" "),a("p",[t._v("“Write Once, Run Anywhere（一次编写，随处运行）”这句宣传口号，真心经典，流传了好多年！以至于，直到今天，依然有很多人觉得跨平台是 Java 语言最大的优势。实际上，跨平台已经不是 Java 最大的卖点了，各种 JDK 新特性也不是。目前市面上虚拟化技术已经非常成熟，比如你通过 Docker 就很容易实现跨平台了。在我看来，Java 强大的生态才是！")]),t._v(" "),a("h3",{attrs:{id:"_2-jvm-vs-jdk-vs-jre"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-jvm-vs-jdk-vs-jre"}},[t._v("#")]),t._v(" 2. JVM vs JDK vs JRE")]),t._v(" "),a("h4",{attrs:{id:"jvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[t._v("#")]),t._v(" JVM")]),t._v(" "),a("p",[t._v("Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。")]),t._v(" "),a("h4",{attrs:{id:"jdk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk"}},[t._v("#")]),t._v(" JDK")]),t._v(" "),a("p",[t._v("JDK 是 Java Development Kit 缩写，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。")]),t._v(" "),a("h3",{attrs:{id:"jre"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jre"}},[t._v("#")]),t._v(" JRE")]),t._v(" "),a("p",[t._v("JRE 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。")]),t._v(" "),a("blockquote",[a("p",[t._v("如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE 就可以了。如果你需要进行一些 Java 编程方面的工作，那么你就需要安装 JDK 了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何 Java 开发，仍然需要安装 JDK。例如，如果要使用 JSP 部署 Web 应用程序，那么从技术上讲，您只是在应用程序服务器中运行 Java 程序。那你为什么需要 JDK 呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。")])]),t._v(" "),a("h3",{attrs:{id:"_3-什么是字节码-采用字节码的好处是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-什么是字节码-采用字节码的好处是什么"}},[t._v("#")]),t._v(" 3. 什么是字节码?采用字节码的好处是什么?")]),t._v(" "),a("p",[t._v("在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 "),a("code",[t._v(".class")]),t._v(" 的文件），它不面向任何特定的处理器，只面向虚拟机。")]),t._v(" "),a("p",[t._v("Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。")]),t._v(" "),a("p",[t._v("所以， Java 程序运行时相对来说还是高效的（不过，和 C++，Rust，Go 等语言还是有一定差距的），而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。")]),t._v(" "),a("p",[a("img",{attrs:{src:"1.assets/image-20230105140315175.png",alt:"image-20230105140315175"}})]),t._v(" "),a("p",[t._v("我们需要格外注意的是 "),a("code",[t._v(".class->机器码")]),t._v(" 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT（just-in-time compilation） 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 "),a("strong",[t._v("Java 是编译与解释共存的语言")]),t._v(" 。")]),t._v(" "),a("blockquote",[a("p",[t._v("HotSpot 采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是 JIT 所需要编译的部分。JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。"),a("strong",[t._v("JDK 9 引入了一种新的编译模式 AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了 JIT 预热等各方面的开销。JDK 支持分层编译和 AOT 协作使用。")])])]),t._v(" "),a("h3",{attrs:{id:"_4-为什么不全部使用-aot-呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-为什么不全部使用-aot-呢"}},[t._v("#")]),t._v(" 4. 为什么不全部使用 AOT 呢？")]),t._v(" "),a("p",[t._v("AOT 可以提前编译节省启动时间，那为什么不全部使用这种编译方式呢？")]),t._v(" "),a("p",[t._v("长话短说，这和 Java 语言的动态特性有千丝万缕的联系了。举个例子，CGLIB 动态代理使用的是 ASM 技术，而这种技术大致原理是运行时直接在内存中生成并加载修改后的字节码文件也就是 "),a("code",[t._v(".class")]),t._v(" 文件，如果全部使用 AOT 提前编译，也就不能使用 ASM 技术了。为了支持类似的动态特性，所以选择使用 JIT 即时编译器。")]),t._v(" "),a("h3",{attrs:{id:"_5-为什么说-java-语言-编译与解释并存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-为什么说-java-语言-编译与解释并存"}},[t._v("#")]),t._v(" 5. 为什么说 Java 语言“编译与解释并存”？")]),t._v(" "),a("p",[t._v("这是因为 Java 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（"),a("code",[t._v(".class")]),t._v(" 文件），这种字节码必须由 Java 解释器来解释执行。")]),t._v(" "),a("p",[t._v("我们可以将高级编程语言按照程序的执行方式分为两种：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("编译型")]),t._v(" ："),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E8%AA%9E%E8%A8%80",target:"_blank",rel:"noopener noreferrer"}},[t._v("编译型语言open in new window"),a("OutboundLink")],1),t._v(" 会通过"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("编译器open in new window"),a("OutboundLink")],1),t._v("将源代码一次性翻译成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。")]),t._v(" "),a("li",[a("strong",[t._v("解释型")]),t._v(" ："),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80",target:"_blank",rel:"noopener noreferrer"}},[t._v("解释型语言open in new window"),a("OutboundLink")],1),t._v("会通过"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("解释器open in new window"),a("OutboundLink")],1),t._v("一句一句的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"1.assets/image-20230105141223195.png",alt:"image-20230105141223195"}})]),t._v(" "),a("p",[t._v("根据维基百科介绍：")]),t._v(" "),a("blockquote",[a("p",[t._v("为了改善编译语言的效率而发展出的"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%99%82%E7%B7%A8%E8%AD%AF",target:"_blank",rel:"noopener noreferrer"}},[t._v("即时编译open in new window"),a("OutboundLink")],1),t._v("技术，已经缩小了这两种语言间的差距。这种技术混合了编译语言与解释型语言的优点，它像编译语言一样，先把程序源代码编译成"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E7%A0%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("字节码open in new window"),a("OutboundLink")],1),t._v("。到执行期时，再将字节码直译，之后执行。"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/Java",target:"_blank",rel:"noopener noreferrer"}},[t._v("Javaopen in new window"),a("OutboundLink")],1),t._v("与"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/LLVM",target:"_blank",rel:"noopener noreferrer"}},[t._v("LLVMopen in new window"),a("OutboundLink")],1),t._v("是这种技术的代表产物。")]),t._v(" "),a("p",[t._v("相关阅读："),a("a",{attrs:{href:"https://tech.meituan.com/2020/10/22/java-jit-practice-in-meituan.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("基本功 | Java 即时编译器原理解析及实践"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"_6-oracle-jdk-vs-openjdk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-oracle-jdk-vs-openjdk"}},[t._v("#")]),t._v(" 6. Oracle JDK vs OpenJDK *")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://javaguide.cn/java/basis/java-basic-questions-01.html#oracle-jdk-vs-openjdk",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java基础常见面试题总结(上) | JavaGuide(Java面试+学习指南)"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"_7-java-和-c-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-java-和-c-的区别"}},[t._v("#")]),t._v(" 7. Java 和 C++ 的区别?")]),t._v(" "),a("p",[t._v("虽然，Java 和 C++ 都是面向对象的语言，都支持封装、继承和多态，但是，它们还是有挺多不相同的地方：")]),t._v(" "),a("ul",[a("li",[t._v("Java 不提供指针来直接访问内存，程序内存更加安全")]),t._v(" "),a("li",[t._v("Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。")]),t._v(" "),a("li",[t._v("Java 有自动内存管理垃圾回收机制(GC)，不需要程序员手动释放无用内存。")]),t._v(" "),a("li",[t._v("C ++同时支持方法重载和操作符重载，但是 Java 只支持方法重载（操作符重载增加了复杂性，这与 Java 最初的设计思想不符）。")]),t._v(" "),a("li",[t._v("......")])]),t._v(" "),a("h2",{attrs:{id:"基本语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[t._v("#")]),t._v(" 基本语法")]),t._v(" "),a("h3",{attrs:{id:"_1-注释有哪几种形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-注释有哪几种形式"}},[t._v("#")]),t._v(" 1. 注释有哪几种形式？")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("单行注释")]),t._v(" ：通常用于解释方法内某单行代码的作用。")]),t._v(" "),a("li",[a("strong",[t._v("多行注释")]),t._v(" ：通常用于解释一段代码的作用。")]),t._v(" "),a("li",[a("strong",[t._v("文档注释")]),t._v(" ：通常用于生成 Java 开发文档。")])]),t._v(" "),a("p",[t._v("用的比较多的还是单行注释和文档注释，多行注释在实际开发中使用的相对较少。")]),t._v(" "),a("p",[a("img",{attrs:{src:"1.assets/image-20230105141859407.png",alt:"image-20230105141859407"}})]),t._v(" "),a("p",[t._v("在我们编写代码的时候，如果代码量比较少，我们自己或者团队其他成员还可以很轻易地看懂代码，但是当项目结构一旦复杂起来，我们就需要用到注释了。注释并不会执行(编译器在编译代码之前会把代码中的所有注释抹掉,字节码中不保留注释)，是我们程序员写给自己看的，注释是你的代码说明书，能够帮助看代码的人快速地理清代码之间的逻辑关系。因此，在写程序的时候随手加上注释是一个非常好的习惯。")]),t._v(" "),a("p",[t._v("《Clean Code》这本书明确指出：")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("代码的注释不是越详细越好。实际上好的代码本身就是注释，我们要尽量规范和美化自己的代码来减少不必要的注释。")])]),t._v(" "),a("p",[a("strong",[t._v("若编程语言足够有表达力，就不需要注释，尽量通过代码来阐述。")])]),t._v(" "),a("p",[t._v("举个例子：")]),t._v(" "),a("p",[t._v("去掉下面复杂的注释，只需要创建一个与注释所言同一事物的函数即可")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// check to see if the employee is eligible for full benefits")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("employee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HOURLY_FLAG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("employee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("应替换为")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("employee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEligibleForFullBenefits")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])]),t._v(" "),a("h3",{attrs:{id:"_2-标识符和关键字的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-标识符和关键字的区别是什么"}},[t._v("#")]),t._v(" 2. 标识符和关键字的区别是什么？")]),t._v(" "),a("p",[t._v("在我们编写程序的时候，需要大量地为程序、类、变量、方法等取名字，于是就有了 "),a("strong",[t._v("标识符")]),t._v(" 。简单来说， "),a("strong",[t._v("标识符就是一个名字")]),t._v(" 。")]),t._v(" "),a("p",[t._v("有一些标识符，Java 语言已经赋予了其特殊的含义，只能用于特定的地方，这些特殊的标识符就是 "),a("strong",[t._v("关键字")]),t._v(" 。简单来说，"),a("strong",[t._v("关键字是被赋予特殊含义的标识符")]),t._v(" 。")]),t._v(" "),a("p",[t._v("比如，在我们的日常生活中，如果我们想要开一家店，则要给这个店起一个名字，起的这个“名字”就叫标识符。但是我们店的名字不能叫“警察局”，因为“警察局”这个名字已经被赋予了特殊的含义，而“警察局”就是我们日常生活中的关键字。")]),t._v(" "),a("h3",{attrs:{id:"_3-java-语言关键字有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-java-语言关键字有哪些"}},[t._v("#")]),t._v(" 3. Java 语言关键字有哪些？")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("分类")]),t._v(" "),a("th",[t._v("关键字")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}}),t._v(" "),a("th"),t._v(" "),a("th"),t._v(" "),a("th"),t._v(" "),a("th"),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("访问控制")]),t._v(" "),a("td",[t._v("private")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("protected")]),t._v(" "),a("td",[t._v("public")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("类，方法和变量修饰符")]),t._v(" "),a("td",[t._v("abstract")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("class")]),t._v(" "),a("td",[t._v("extends")]),t._v(" "),a("td",[t._v("final")]),t._v(" "),a("td",[t._v("implements")]),t._v(" "),a("td",[t._v("interface")]),t._v(" "),a("td",[t._v("native")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",[t._v("new")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("static")]),t._v(" "),a("td",[t._v("strictfp")]),t._v(" "),a("td",[t._v("synchronized")]),t._v(" "),a("td",[t._v("transient")]),t._v(" "),a("td",[t._v("volatile")]),t._v(" "),a("td",[t._v("enum")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("程序控制")]),t._v(" "),a("td",[t._v("break")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("continue")]),t._v(" "),a("td",[t._v("return")]),t._v(" "),a("td",[t._v("do")]),t._v(" "),a("td",[t._v("while")]),t._v(" "),a("td",[t._v("if")]),t._v(" "),a("td",[t._v("else")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",[t._v("for")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("instanceof")]),t._v(" "),a("td",[t._v("switch")]),t._v(" "),a("td",[t._v("case")]),t._v(" "),a("td",[t._v("default")]),t._v(" "),a("td",[t._v("assert")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("错误处理")]),t._v(" "),a("td",[t._v("try")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("catch")]),t._v(" "),a("td",[t._v("throw")]),t._v(" "),a("td",[t._v("throws")]),t._v(" "),a("td",[t._v("finally")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("包相关")]),t._v(" "),a("td",[t._v("import")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("package")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("基本类型")]),t._v(" "),a("td",[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("byte")]),t._v(" "),a("td",[t._v("char")]),t._v(" "),a("td",[t._v("double")]),t._v(" "),a("td",[t._v("float")]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[t._v("long")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",[t._v("short")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("变量引用")]),t._v(" "),a("td",[t._v("super")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("this")]),t._v(" "),a("td",[t._v("void")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("保留字")]),t._v(" "),a("td",[t._v("goto")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("const")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("blockquote",[a("p",[t._v("Tips：所有的关键字都是小写的，在 IDE 中会以特殊颜色显示。")]),t._v(" "),a("p",[a("code",[t._v("default")]),t._v(" 这个关键字很特殊，既属于程序控制，也属于类，方法和变量修饰符，还属于访问控制。")]),t._v(" "),a("ul",[a("li",[t._v("在程序控制中，当在 "),a("code",[t._v("switch")]),t._v(" 中匹配不到任何情况时，可以使用 "),a("code",[t._v("default")]),t._v(" 来编写默认匹配的情况。")]),t._v(" "),a("li",[t._v("在类，方法和变量修饰符中，从 JDK8 开始引入了默认方法，可以使用 "),a("code",[t._v("default")]),t._v(" 关键字来定义一个方法的默认实现。")]),t._v(" "),a("li",[t._v("在访问控制中，如果一个方法前没有任何修饰符，则默认会有一个修饰符 "),a("code",[t._v("default")]),t._v("，但是这个修饰符加上了就会报错。")])])]),t._v(" "),a("p",[t._v("⚠️ 注意 ：虽然 "),a("code",[t._v("true")]),t._v(", "),a("code",[t._v("false")]),t._v(", 和 "),a("code",[t._v("null")]),t._v(" 看起来像关键字但实际上他们是字面值，同时你也不可以作为标识符来使用。")]),t._v(" "),a("p",[t._v("官方文档：https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html")]),t._v(" "),a("h3",{attrs:{id:"_4-自增自减运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-自增自减运算符"}},[t._v("#")]),t._v(" 4. 自增自减运算符")]),t._v(" "),a("p",[t._v("在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++)和自减运算符（--）。")]),t._v(" "),a("p",[t._v("++ 和 -- 运算符可以放在变量之前，也可以放在变量之后，当运算符放在变量之前时(前缀)，先自增/减，再赋值；当运算符放在变量之后时(后缀)，先赋值，再自增/减。")]),t._v(" "),a("p",[t._v("例如，当 "),a("code",[t._v("b = ++a")]),t._v(" 时，先自增（自己增加 1），再赋值（赋值给 b）；当 "),a("code",[t._v("b = a++")]),t._v(" 时，先赋值(赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++输出的是 a 值。用一句口诀就是：“符号在前就先加/减，符号在后就后加/减”。")]),t._v(" "),a("h3",{attrs:{id:"_5-移位运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-移位运算符"}},[t._v("#")]),t._v(" 5. 移位运算符 *")]),t._v(" "),a("p",[t._v("移位运算符是最基本的运算符之一，几乎每种编程语言都包含这一运算符。移位操作中，被操作的数据被视为二进制数，移位就是将其向左或向右移动若干位的运算。")]),t._v(" "),a("p",[t._v("移位运算符在各种框架以及 JDK 自身的源码中使用还是挺广泛的，"),a("code",[t._v("HashMap")]),t._v("（JDK1.8） 中的 "),a("code",[t._v("hash")]),t._v(" 方法的源码就用到了移位运算符：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// key.hashCode()：返回散列值也就是hashcode")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ^ ：按位异或")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// >>>:无符号右移，忽略符号位，空位都以0补齐")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("在 Java 代码里使用 "),a("code",[t._v("<<")]),t._v(" 、 "),a("code",[t._v(">>")]),t._v(" 和"),a("code",[t._v(">>>")]),t._v("转换成的指令码运行起来会更高效些。")]),t._v(" "),a("p",[t._v("掌握最基本的移位运算符知识还是很有必要的，这不光可以帮助我们在代码中使用，还可以帮助我们理解源码中涉及到移位运算符的代码。")]),t._v(" "),a("p",[t._v("Java 中有三种移位运算符：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("<<")]),t._v(" :左移运算符，向左移若干位，高位丢弃，低位补零。"),a("code",[t._v("x << 1")]),t._v(",相当于 x 乘以 2(不溢出的情况下)。")]),t._v(" "),a("li",[a("code",[t._v(">>")]),t._v(" :带符号右移，向右移若干位，高位补符号位，低位丢弃。正数高位补 0,负数高位补 1。"),a("code",[t._v("x >> 1")]),t._v(",相当于 x 除以 2。")]),t._v(" "),a("li",[a("code",[t._v(">>>")]),t._v(" :无符号右移，忽略符号位，空位都以 0 补齐。")])]),t._v(" "),a("p",[t._v("由于 "),a("code",[t._v("double")]),t._v("，"),a("code",[t._v("float")]),t._v(" 在二进制中的表现比较特殊，因此不能来进行移位操作。")]),t._v(" "),a("p",[t._v("移位操作符实际上支持的类型只有"),a("code",[t._v("int")]),t._v("和"),a("code",[t._v("long")]),t._v("，编译器在对"),a("code",[t._v("short")]),t._v("、"),a("code",[t._v("byte")]),t._v("、"),a("code",[t._v("char")]),t._v("类型进行移位前，都会将其转换为"),a("code",[t._v("int")]),t._v("类型再操作。")]),t._v(" "),a("p",[a("strong",[t._v("如果移位的位数超过数值所占有的位数会怎样？")])]),t._v(" "),a("p",[t._v("当 int 类型左移/右移位数大于等于 32 位操作时，会先求余（%）后再进行左移/右移操作。也就是说左移/右移 32 位相当于不进行移位操作（32%32=0），左移/右移 42 位相当于左移/右移 10 位（42%32=10）。当 long 类型进行左移/右移操作时，由于 long 对应的二进制是 64 位，因此求余操作的基数也变成了 64。")]),t._v(" "),a("p",[t._v("也就是说："),a("code",[t._v("x<<42")]),t._v("等同于"),a("code",[t._v("x<<10")]),t._v("，"),a("code",[t._v("x>>42")]),t._v("等同于"),a("code",[t._v("x>>10")]),t._v("，``x >>>42"),a("code",[t._v("等同于")]),t._v("i4 >>> 10`。")]),t._v(" "),a("p",[a("strong",[t._v("左移运算符代码示例")]),t._v(" ：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"初始数据： "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"初始数据对应的二进制字符串： "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toBinaryString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ni "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"左移 10 位后的数据 "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"左移 10 位后的数据对应的二进制字符 "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toBinaryString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("输出：")]),t._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("初始数据： -1\n初始数据对应的二进制字符串： 11111111111111111111111111111111\n左移 10 位后的数据 -1024\n左移 10 位后的数据对应的二进制字符 11111111111111111111110000000000\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("由于左移位数大于等于 32 位操作时，会先求余（%）后再进行左移操作，所以下面的代码左移 42 位相当于左移 10 位（42%32=10），输出结果和前面的代码一样。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"初始数据： "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"初始数据对应的二进制字符串： "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toBinaryString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ni "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"左移 10 位后的数据 "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"左移 10 位后的数据对应的二进制字符 "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toBinaryString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("右移运算符使用类似，篇幅问题，这里就不做演示了。")])])}),[],!1,null,null,null);a.default=e.exports}}]);